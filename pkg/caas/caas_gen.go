// Package Caas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package caas

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of all accounts
	// (GET /account)
	GetAccount(c *gin.Context)
	// Create an account
	// (POST /account)
	PostAccount(c *gin.Context)
	// Returns a list of all clusters
	// (GET /cluster)
	GetCluster(c *gin.Context)
	// Create a cluster
	// (POST /cluster)
	PostCluster(c *gin.Context)
	// Finds Cluster by accountId
	// (GET /cluster/findByAccountId)
	GetClusterFindByAccountId(c *gin.Context, params GetClusterFindByAccountIdParams)
	// Delete cluster with specific id
	// (DELETE /cluster/{id})
	DeleteClusterId(c *gin.Context, id int)
	// Get cluster with specific id
	// (GET /cluster/{id})
	GetClusterId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAccount(c)
}

// PostAccount operation middleware
func (siw *ServerInterfaceWrapper) PostAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAccount(c)
}

// GetCluster operation middleware
func (siw *ServerInterfaceWrapper) GetCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetCluster(c)
}

// PostCluster operation middleware
func (siw *ServerInterfaceWrapper) PostCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCluster(c)
}

// GetClusterFindByAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetClusterFindByAccountId(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterFindByAccountIdParams

	// ------------- Required query parameter "accountId" -------------
	if paramValue := c.Query("accountId"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument accountId is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "accountId", c.Request.URL.Query(), &params.AccountId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter accountId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetClusterFindByAccountId(c, params)
}

// DeleteClusterId operation middleware
func (siw *ServerInterfaceWrapper) DeleteClusterId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteClusterId(c, id)
}

// GetClusterId operation middleware
func (siw *ServerInterfaceWrapper) GetClusterId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetClusterId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/account", wrapper.GetAccount)

	router.POST(options.BaseURL+"/account", wrapper.PostAccount)

	router.GET(options.BaseURL+"/cluster", wrapper.GetCluster)

	router.POST(options.BaseURL+"/cluster", wrapper.PostCluster)

	router.GET(options.BaseURL+"/cluster/findByAccountId", wrapper.GetClusterFindByAccountId)

	router.DELETE(options.BaseURL+"/cluster/:id", wrapper.DeleteClusterId)

	router.GET(options.BaseURL+"/cluster/:id", wrapper.GetClusterId)

	return router
}

